#!/bin/bash

# script will terminate as soon as any command fails
set -e

bin() {
  basename $0
}

[ -n "$DEBUG" ] && set -x

export MAVEN_OPTS="-Xmx4096m"
export KARAF_DEBUG=true

export BOLD=`tput bold`
export UNDERLINE_ON=`tput smul`
export UNDERLINE_OFF=`tput rmul`
export TEXT_BLACK=`tput setaf 0`
export TEXT_RED=`tput setaf 1`
export TEXT_GREEN=`tput setaf 2`
export TEXT_YELLOW=`tput setaf 3`
export TEXT_BLUE=`tput setaf 4`
export TEXT_MAGENTA=`tput setaf 5`
export TEXT_CYAN=`tput setaf 6`
export TEXT_WHITE=`tput setaf 7`
export BACKGROUND_BLACK=`tput setab 0`
export BACKGROUND_RED=`tput setab 1`
export BACKGROUND_GREEN=`tput setab 2`
export BACKGROUND_YELLOW=`tput setab 3`
export BACKGROUND_BLUE=`tput setab 4`
export BACKGROUND_MAGENTA=`tput setab 5`
export BACKGROUND_CYAN=`tput setab 6`
export BACKGROUND_WHITE=`tput setab 7`
export RESET_FORMATTING=`tput sgr0`

mvn-color() {
  sed -E \
    -e "s/(\[INFO\])/${TEXT_BLUE}\1${RESET_FORMATTING}/g" \
    -e "s/(\[WARNING\])/${TEXT_YELLOW}\1${RESET_FORMATTING}/g" \
    -e "s/(\[ERROR\])/${TEXT_RED}\1${RESET_FORMATTING}/g" \
    -e "s/(\[debug\])/${TEXT_GREEN}\1${RESET_FORMATTING}/g" \
    -e "s/Tests run: ([^,]*), Failures: ([^,]*), Errors: ([^,]*), Skipped: ([^,]*)/${BOLD}${TEXT_GREEN}Tests run: \1${RESET_FORMATTING}, Failures: ${BOLD}${TEXT_RED}\2${RESET_FORMATTING}, Errors: ${BOLD}${TEXT_RED}\3${RESET_FORMATTING}, Skipped: ${BOLD}${TEXT_YELLOW}\4${RESET_FORMATTING}/g"

  echo -ne ${RESET_FORMATTING}
}

root=/tmp/ddev
unzipdir=""
savelog=0
quiet=0

mvn=$(which mvn)
curl=$(which curl)
unzip=$(which unzip)
tail=$(which tail)

# quit script on ctrl-c
trap 'echo INTERRUPTED; exit 1' INT


# echo to stderr
echo2() {
  echo "$@" 1>&2
}

# echo to stdout and stderr
echo3() {
  echo "$@"
  echo "$@" 1>&2
}

# curl insecure https and don't print to stderr
curl() {
  $curl --insecure $@ 2>/dev/null
}

# curl and format xml
xcurl() {
  curl $@ | xmllint --format - | less
}

mvn-log() {
  echo2 "running: mvn $@"

  if [[ $savelog == 0 ]]; then
    $mvn $@
  else
    $mvn $@ | tee "$(tmp)/log.txt"
  fi
}

mvn-quiet() {
  if [[ $quiet == 0 ]]; then
    mvn-log $@ | mvn-color
  else
    mvn-log $@ > /dev/null
  fi
}

mvn() {
  mvn-quiet $@ || fail 'mvn failed'
}

exists() {
  type $1 > /dev/null 2>&1
  if [ "$?" -eq "0" ]; then
    return 0 # found
  else
    return 1 # not found
  fi
}

notify() {
  exists terminal-notifier && terminal-notifier -title "$1" -message "$2"
}

usage() {
  echo2 "Usage: $(bin) [OPTIONS] COMMAND [arg...]

The thing that does the things.

Options:

    -h      Display this help message
    -s      Save output to a temp directory (default=$savelog)
    -q      Suppress output                 (default=$quiet)

Commands:

  Maven:

    qb      Run a maven quickbuild
    fb      Run a maven fullbuild
    sd      Like fb, just -DskipDocs=true
    st      Like fb, just no tests
    re      Rebuild only updated modules and their dependencies

    NOTE: any options after COMMAND get passed directly to maven.

      $(bin) qb -T 1C

    updated List updated maven modules (updates which haven't been comitted)

  Dev Cycle:

    unzip   Unzip current distribution in pwd
    run     Run a currently unzipped distribution
    redo    re, unzip, and run all in one
    redorm  redo, and remove the unzip directory
    rmnode  remove all and node_modules

    tail    Tail current build output in another window
    list    Find in $root for saved logs
    clean   Clean temp directory $root

  Git:

    pr      Checkout a pr from github as 'pr-<number>'

    NOTE: assuming github fork is remote named upstream

  Random:

    upgrade Get newest version of this script

    curl    Like normal curl, but allow insecure https
    xcurl   Like curl, but format output as xml

    findbin   Find the current executable script
    finddist  Find the current distribution zip
"
  exit 2
}

pass() {
  notify 'SUCCESS' "$@"
  echo2 "SUCCESS: $@"
}

fail() {
  notify 'FAILURE' "$@"
  echo2 "FAILURE: $@"
  exit 1
}

pr() {
  local number=$1
  local branch="pr-$number"

  echo2 "fetching pull request #$number..."

  git fetch upstream refs/pull/$number/head:$branch
  git checkout $branch
}

run() {
  local bin=$(findbin)
  if [ -f $bin ]; then
    echo2 $bin
    $bin
  fi
}

tail() {
  $tail -f "$(list | $tail -n 1)"
}

list() {
  find $root -type f $@
}

findbin() {
  local snap=$(ls | grep SNAP || echo "error")
  if [ -d $snap ]; then
    find $snap | grep bin | grep -E '(d..)$'
  else
    fail "can't find snapshot directory"
  fi
}

finddist() {
  if [ -d 'distribution' ]; then
    find ./distribution | grep 'SNAPSHOT\.zip$' | grep -vE 'kernel|sdk' | grep '\/d..'
  else
    fail "can't find distribution directory"
  fi
}

zipdir() {
  basename $1 | sed 's/.zip//'
}

unzip() {
  local dist=$(finddist)
  local dir=$(zipdir $dist) 
  unzipdir=$dir

  if [ "$1" == "--force" ]; then
    rm -rf $dir
  elif [ -d $dir ]; then
    confirm "delete dist dir = $dir" && rm -rf $dir
  fi

  $unzip $dist
}

isotime() {
  date +"%Y-%m-%dT%H:%M:%SZ"
}

git-branch() {
  git rev-parse --abbrev-ref HEAD
}

git-commit() {
  git rev-parse --short HEAD
}

git-root() {
  git rev-parse --show-toplevel
}

tmp() {
  local dir="$root/$(isotime)_$(git-branch)_$(git-commit)"
  mkdir -p $dir
  echo2 "temp directory: $dir"
  echo $dir
}

itest() {
  local dir='distribution/test/itests'
  if [ ! -d $dir ]; then
    fail "cannot find itest directory from $(pwd)"
  fi

  cd $dir

  test_class="$1"
  test_method="$2"

  if [ "$test_method" != "" ]; then
    mvn --define test="$test_class#$test_method" test # -DisDebugEnabled=true
  else
    mvn --define test="$test_class" test # -DisDebugEnabled=true
  fi
}

st() {
  mvn $@ install --define skipTests=true
}

sd() {
  mvn $@ install --define skipDocs=true
}

fb() {
  mvn $@ clean install
}

qb() {
  mvn install $@ \
    --define skipStatic=true \
    --define skipTests=true \
    --define skipDocs=true \
    --no-snapshot-updates
}

re() {
  local list=$(updated-list)
  if [ "$list" != "" ]; then
    qb $@ --also-make-dependents --projects $list
  else
    fail 'no changes since previous commit'
  fi
}

updated() {
  git status --untracked-files=no --short | sed -E 's/...(.*)(src.*|pom.xml)/\1/' | uniq
}

updated-list() {
  updated | tr '\n' ','
}

redo() {
  re $@ -T 1C
  unzip --force
  run
}

redorm() {
  redo $@
  rm -rf $unzipdir
}

confirm() {
  # call with a prompt string or use a default
  read -r -p "${1:-Are you sure?} [y/N]: " response
  case $response in
    [yY][eE][sS]|[yY]) 
      true
      ;;
    *)
      false
      ;;
  esac
}

clean() {
  confirm "delete builds in $root" && rm -rf $root/*
}

rmnode() {
  find . -name node_modules -prune | xargs -n 1 rm -r
}

upgrade() {
  npm install -g ddev
}

where() {
  local b=$(which $(bin))
  local dir=$(dirname $b)
  local deref=$(readlink $b)
  echo $dir/$(dirname $deref)
}

version() {
  cat $(where)/package.json | grep version | sed -E 's/.*"(.*\.\.*.\.*)".*/\1/'
}

# future ideas

is_osx() {
  if [[ "$(uname)" == "Darwin" ]]; then
    return 0
  else
    return 1
  fi
}

# quickly setup a dev environment on osx
setup-osx() {
  # install java, node
  echo 'TODO: implement setup-osx.'
}

setup() {
  is_osx && setup-osx
}

while getopts ":hqs" opt; do
  case "$opt" in
  h) usage ;;
  q) quiet=1 ;;
  s) savelog=1 ;;
  esac
done
shift $(expr $OPTIND - 1)


if [ "$1" == "" ]; then
  usage
fi

cmd=$1
shift

$cmd $@ || usage
